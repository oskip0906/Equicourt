
import React, { useState } from 'react';
import { FileText, Scale, Clock, RotateCcw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import type { CaseData } from '../pages/Index';

interface ResultsViewProps {
  caseData: CaseData;
  onNewCase: () => void;
}

const ResultsView: React.FC<ResultsViewProps> = ({ caseData, onNewCase }) => {
  const { results } = caseData;
  
  if (!results) return null;

  return (
    <div className="max-w-6xl mx-auto">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h2 className="text-3xl font-bold text-slate-800 mb-2">Arbitration Results</h2>
          <p className="text-slate-600">Case: {caseData.title}</p>
        </div>
        <Button onClick={onNewCase} variant="outline" className="flex items-center space-x-2">
          <RotateCcw className="h-4 w-4" />
          <span>New Case</span>
        </Button>
      </div>

      <Tabs defaultValue="transcripts" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="transcripts" className="flex items-center space-x-2">
            <FileText className="h-4 w-4" />
            <span>Transcripts & Timeline</span>
          </TabsTrigger>
          <TabsTrigger value="legal" className="flex items-center space-x-2">
            <Scale className="h-4 w-4" />
            <span>Legal Analysis</span>
          </TabsTrigger>
          <TabsTrigger value="verdict" className="flex items-center space-x-2">
            <Clock className="h-4 w-4" />
            <span>Final Verdict</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="transcripts" className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-blue-700">Party A Statement</CardTitle>
                <CardDescription>Transcript generated by AI Transcription Verifier</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-slate-700 leading-relaxed">{results.transcripts.partyA}</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle className="text-green-700">Party B Statement</CardTitle>
                <CardDescription>Transcript generated by AI Transcription Verifier</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-slate-700 leading-relaxed">{results.transcripts.partyB}</p>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Unified Timeline of Events</CardTitle>
              <CardDescription>Generated by Factual Judge AI</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {results.timeline.map((event, index) => (
                  <div key={index} className="flex items-start space-x-4 p-4 border rounded-lg">
                    <div className="flex-shrink-0">
                      <Badge variant={
                        event.agreement_status === 'Agreed' ? 'default' :
                        event.agreement_status === 'Disputed' ? 'destructive' : 'secondary'
                      }>
                        {event.agreement_status}
                      </Badge>
                    </div>
                    <div className="flex-grow">
                      <p className="font-medium text-slate-800">{event.event_description}</p>
                      <p className="text-sm text-slate-500">{event.timestamp}</p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Procedural Review</CardTitle>
              <CardDescription>Assessment by Procedural Judge AI</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium text-slate-600">Speaking Time Ratio</p>
                  <p className="text-2xl font-bold text-slate-800">{results.proceduralReview.speaking_time_ratio.toFixed(2)}</p>
                </div>
                <div>
                  <p className="text-sm font-medium text-slate-600">Fairness Assessment</p>
                  <Badge variant={results.proceduralReview.fairness_assessment === 'Balanced' ? 'default' : 'destructive'}>
                    {results.proceduralReview.fairness_assessment}
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="legal" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Legal Precedent Analysis</CardTitle>
              <CardDescription>Generated by Legal Precedent Judge AI</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {Object.entries(results.legalAnalysis).map(([event, citations], index) => (
                  <div key={index} className="p-4 border rounded-lg">
                    <p className="font-medium text-slate-800 mb-2">{event}</p>
                    <div className="space-y-1">
                      {citations.map((citation, citationIndex) => (
                        <Badge key={citationIndex} variant="outline" className="mr-2">
                          {citation}
                        </Badge>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="verdict" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Final Arbitration Verdict</CardTitle>
              <CardDescription>Drafted by Verdict Drafting Judge AI</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="prose prose-slate max-w-none">
                <div 
                  dangerouslySetInnerHTML={{ 
                    __html: results.finalVerdict
                      .replace(/^# (.*)$/gm, '<h1 class="text-2xl font-bold text-slate-800 mb-4">$1</h1>')
                      .replace(/^## (.*)$/gm, '<h2 class="text-xl font-semibold text-slate-700 mb-3 mt-6">$1</h2>')
                      .replace(/^\*\*(.*?)\*\*:/gm, '<p class="font-semibold text-slate-800 mb-1">$1:</p>')
                      .replace(/^\- \*\*(.*?)\*\*:/gm, '<p class="font-semibold text-slate-700 ml-4">â€¢ $1:</p>')
                      .replace(/\n\n/g, '</p><p class="mb-3">')
                      .replace(/^(?!<)(.*)$/gm, '<p class="mb-3 text-slate-700">$1</p>')
                  }} 
                />
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ResultsView;
